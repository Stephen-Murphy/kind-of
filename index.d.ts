declare type DateLike = {
    toDateString: Function;
    getDate: Function;
    setDate: Function;
};
declare type RegExpLike = {
    flags: string;
    ignoreCase: boolean;
    multiline: boolean;
    global: boolean;
};
declare function kindOf(val: undefined): 'undefined';
declare function kindOf(val: null): 'null';
declare function kindOf(val: boolean | Boolean): 'boolean';
declare function kindOf(val: string | String): 'string';
declare function kindOf(val: number | Number): 'number';
declare function kindOf(val: symbol): 'symbol';
declare function kindOf(val: IterableIterator<[any, any]>): 'mapiterator';
declare function kindOf(val: IterableIterator<any>): 'setiterator' | 'stringiterator' | 'arrayiterator';
declare function kindOf(val: (...args: any[]) => IterableIterator<any>): 'generatorfunction';
declare function kindOf(val: Function): 'function';
declare function kindOf(val: Array<any>): 'array';
declare function kindOf(val: Date | DateLike): 'date';
declare function kindOf(val: Buffer): 'buffer';
declare function kindOf(val: Error): 'error';
declare function kindOf(val: RegExp | RegExpLike): 'regexp';
declare function kindOf(val: Promise<any>): 'promise';
declare function kindOf<T extends object, U extends any>(val: WeakMap<T, U>): 'weakmap';
declare function kindOf<T extends object>(val: WeakSet<T>): 'weakset';
declare function kindOf<T extends any, U extends any>(val: Map<T, U>): 'map';
declare function kindOf<T extends any>(val: Set<T>): 'set';
declare function kindOf(val: Int8Array): 'int8array';
declare function kindOf(val: Uint8Array): 'uint8array';
declare function kindOf(val: Uint8ClampedArray): 'uint8clampedarray';
declare function kindOf(val: Int16Array): 'int16array';
declare function kindOf(val: Uint16Array): 'uint16array';
declare function kindOf(val: Int32Array): 'int32array';
declare function kindOf(val: Uint32Array): 'uint32array';
declare function kindOf(val: Float32Array): 'float32array';
declare function kindOf(val: Float64Array): 'float64array';
declare function kindOf(val: IArguments): 'arguments';
declare function kindOf(val: {
    throw: Function;
    return: Function;
    next: Function;
}): 'generator';
declare function kindOf(val: NodeJS.Global): 'global';
declare function kindOf(val: Window): 'window';
declare function kindOf(val: object): 'object';
declare function kindOf(val: any): string;
export default kindOf;
